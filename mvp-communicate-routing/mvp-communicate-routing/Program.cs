// See https://aka.ms/new-console-template for more information
using mvp_communicate_routing;

/*
 * Цель:
 * - удобство расширения программы, добавление нового функционала;
 * - чистота кода;
 * - очевидность и простота добавления новых функций, новых окон;
 * - простота добавления новых сущностей базы данных и их обработка и представление;
 * - уйти от большого количества подписки на события и отслеживание их отписки;
 * - обработка сообщения только на конечной точке - главный презентер, в котором определены и добавляются обработчики;
 * 
 * 
 * Hub смотрит какие методы есть у зарегистрированного компонента
 * Методы можно помечать аттрибутами
 * 
 * =======
 * Или презентер получает от вьюшек сообщения, обрабатывает их, обращается к сервисам и отвечает.
 * Презентер работает с менеджером открытых окон.
 * Менеджер открытых окон получает сообщение от открытого окна.
 * Передает презентеру.
 * 
 * Структура строки запроса
 * окошко может отправлять запрос только на презентер
 * презентер отправлят на хаб
 * 
 * Все что работает на данный момент - пусть так будет в этом виде код
 * - добавить новый механизм пока параллельно текущему, с событиями
 * - интегрировать, то есть добавить этот модуль, и он сообщается с существующим презентером
 * -- но изолирован
 * 
 * 
 * Переработать проект xorg с соблюдением onion архитектуры 
 * 
 * Вообще главный презентер - или это будет главный контроллер, определяет базовое взаимодействие.
 * Он имеет механизм добавления новых модулей, которые легко настраиваются для взаимодействия.
 * Модуль (компонент) состоит из вида, сервиса логики, обращение к данным.
 * При добавлении новой функции, например окно предметных целей (500 часов, выбранная дирктория, расчет расписания и т.д.)
 * - сделать окно
 * - добавить маршруты запросов и ответов
 * - в блоке обращения к репозиториям добавить методы, если надо. Репозитории, сервисы ядра содержат набор api
 * -- 
 * 
 * Можно глобальный объект-механизм запросов-ответов внедрять в компоненты
 * Для вью должен быть его пре-презнтер
 * То есть протокол добавления нового вью:
 * - создать папку для этого компонента
 * - создать пре-презентер
 * - создать форму
 * А главный презентер играет роль центрального узла, и содержит менеджер открытых окон
 * 
 * Сообщение содержит информацию в какой отдел оно идет: сервисы, вью и т.д.
 * А так же имя конкретного исполнителя, или имя пункта назначения, если это ответ
 * 
 */

ServicesHub hub = new ServicesHub();
var a = new View(hub);
var b = new ProductService(hub);
var categs = new CategoryService();

//hub.Register(a); // а можно управлять временем жизни и задавать тип, а не экземпляр
hub.RegisterService(b);
hub.RegisterService(categs);
hub.RegisterService(categs);

a.DoRequest();

Console.ReadLine();