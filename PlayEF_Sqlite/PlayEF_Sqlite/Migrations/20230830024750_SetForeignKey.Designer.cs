// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlayEF_Sqlite;

#nullable disable

namespace PlayEF_Sqlite.Migrations
{
    [DbContext(typeof(AppData))]
    [Migration("20230830024750_SetForeignKey")]
    partial class SetForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("PlayEF_Sqlite.Entities.Card", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThoughtId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("scores")
                        .HasColumnType("INTEGER");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("ThoughtId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("PlayEF_Sqlite.Entities.Thought", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Thoughts");
                });

            modelBuilder.Entity("PlayEF_Sqlite.Entities.Card", b =>
                {
                    b.HasOne("PlayEF_Sqlite.Entities.Thought", "Thought")
                        .WithMany()
                        .HasForeignKey("ThoughtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thought");
                });
#pragma warning restore 612, 618
        }
    }
}
